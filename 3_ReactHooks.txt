Intro

	- What are hooks?
		- Hooks are JS functions
			- handle state
			- fetch data
			- interact with browser API
			- functions shared across files / projects (reusability)
			
-- 1 Intro to React Hooks --

-- 1-1 React Hooks History --

	2013 - 2017: 
		- var historicalComponent = React.createClass(
		{
			render: function() {
				return (
					<div>
						<h1> Previous method of creating components </h1>
					</div>
				)
			}
		}
		);
		
		
	After 2017:
	
	function NewComponent() {
		return (
			<div>
				<h1> New Component </h1>
			</div>
		)
	}
	
	PROBLEM:
	
		- When state variables added, need to refactor function components into class
			- time consuming
	SOLUTION:
	
		- React hooks (JS Functions)
			- add state to function components
			- abstract login into separate functions
		
	CONVENTION:
		- React hooks starts with keyword "use"
			- useState
			- useReducer
			- useQuery
			- useContext
			- use<Name>
			
-- 2 useState Hook --

-- 2-1 Reviewing array, object destructuring --


	PROPS concept:
	
			- can pass (props) argument to any components
				- props is essentially an object
					- key: property
					- value: value of property
				
				WHERE TO SPECIFY PROPERTY?
					- property is specified in index.js, or wherever the component is rendered
					
					eg.
					inside index.js:
					
					ReactDom.render(
						<React.StrictMode>
							<App name="Lucas" height=1.8/>
						</React.StrictMode>
					)
					
					inside App.js:
					
					function App(props) {
						return(
						<div>
							<h1> {props.name} has a height of {props.height} </h1>
						</div>
						)
					}
			
			
	Destructuring objects:
	
			function App( {name, height} ) {
				return (
					<div className="App">
						{name} is {height}m tall.
					</div>
				)
			}
	
	Destructuing array:
	
			const [p1, p2, p3] = ["Person1", "Person2", "Person3"];
			console.log(p1, p2, p3);
			
			const [,,p3] = ["Person1", "Person2", "Person3"];
			
			
-- 2-2 Incorporating useState hook --
	- used to add state to a component
	- declared within component function
	
		import { useState } from "react";
		
		function App() {
			const [status, setStatus ] = useState("Undelivered"); // [initialState, function]
			// setStatus used to change state
			// just call : setStatus(<newState>)
			
			return (
				<div>
					<h1> The Package is: {status} </h1>
					<button onClick={()=>setStatus("Delivered")}/> Deliver </button>
				</div>
			);
		}
		
-- 2-3 Checkbox with useState --
	- useState can be used with HTML inputs to track state of input component
	
	
	function Checkbox() {
		const [checked, setChecked] = useState(false);
		return (
			<div>
				<input type="checkbox" value={checked} onChange={()=>setChecked(checked=>!checked)}/>
				{checked?"checked":"unchecked"}
			</div>
		)
	}
	
-- 2-4 State in Component Trees --
	- Typically, app may have multiple components
	- state in 1 component can affect other components
	
	
		eg.
		
		import React, { useState } from "react";
		import { FaStar } from "react-icons/fa";
		
		const createArray = (numStars) => [...Array(numStars)] // [undefined, undefined ...] 

    
		function Star ({ selected=false, onSelect }) {
			return <FaStar color={selected?"red":"grey"} onClick={onSelect}/>; // onClick event, perform onSelect function declared in <Star /> rendering in StarRating Component
			// onClick, will call the onSelect function : setSelectedStars
		}
		
		function StarRating({ totalStars }) {
			const [selectedStars, setSelectedStars] = useState(0); // initially 0 selected stars
			return (
        <>
          {createArray(totalStars).map((star, idx) => (
            <Star key={idx} selected={selectedStars>idx} onSelect={()=>setSelectedStars(idx+1)}/>
          )) }
          <p>
            {selectedStars} of {totalStars}
         </p>
        </>
      )
    }

    function App() {
			return <StarRating totalStars={5}/>
		}

	ReactDOM.render(
	  <React.StrictMode>
		<App />
	  </React.StrictMode>,
	  document.getElementById("root")
	)

-- 3 useEffect Hook --
	- perform "side effects" in components
		- console logging to terminal
		- interact with DOM API (history / window)
		- useEffect(fn_to_execute, []) // [] is the dependency array
		
			- useEffect(fn, []) // only fire once during first render
			- useEffect(fn, [<stateVariableName>]) // fires when specified state changes
				- can be tracking multiple states
					eg: useEffect(fn, [name, height, location]);
				- running certain code only when certain state changes
	
	usage:
	
	import { useState, useEffect } from "react"
	
	function App() {
		const [name, setName] = useState("Lucas");
		
		useEffect(()=>{
			document.title=`Celebrate ${name}`
		});
		
		return(
			<section>
				<p> Congratulations {name}! </p>
				<button onClick={()=>setName("Tommy")}> Change Winner </button>
			</section>
		)

	}

-- 3-3 Fetching data with useEffect
	- another common use case for useEffect
	- typically want
		useEffect(URL, []) // fire only once, else will keep querying for API info
		
	function App() {
		const [data, setData] = useState([]);

		useEffect(()=> {
		  fetch("https://api.github.com/users")
		  .then(res => res.json())
		  .then(res => setData(res))
		}, [])

		if (data) {
		  return (
			<ul>
				{data.map(user=>(
				  <li key={user.id}>{user.login}</li>
				))}
			</ul>
		  )
		}
		return (
		  <p>No Users</p>
		)
	}
	
-- 4 Additional Hooks --

-- 4-1 useReducer Hook --
	- another way to handle states
	- useReducer(set_fn, <initial_state>)
		- function that will execute whenever setState fn called
			- first argument of set_fn is the current state
			- second argument will be argument passed in setState fn
				- only can handle 1 argument

	
	eg.
	
		function App() {
			const [number, setNumber] = useReducer((num, new_num) => num + new_num, 0);
				- num refers to current state (i.e number)
			
			return (
				<h1 onClick={setNumber(1)}> {number} </h1>
			)
		}
		
		
-- 4-2 useReducer replacing useState --
	
	
	useState method:
	
	function Checkbox() {
		  const [checked, setChecked] = useState(false);
		  return (
			<div>
			  <input type="checkbox" value={checked} onChange={()=>setChecked(checked=>!checked)}/>
			  {checked?"checked":"unchecked"}
			</div>
		  )
	}
	
	useReducer method:
		- setState function abstracted to be declared within useReducer() fn
		- previously, function login specified within setState function
	
	function Checkbox() {
	
		  const [checked, setChecked] = useReducer((checked)=>!checked, false);
		  
		  return (
			<div>
			  <input type="checkbox" value={checked} onChange={()=>setChecked()}/>
			  {checked?"checked":"unchecked"}
			</div>
		  )
	}
	

-- 4-3 Dispatching actions using useReducer --

	reducer function:
		- takes in a state and an action
		- returns a new state
		
	
	function App() {
		const initialState = { message: "hi"};
		
		function reducer(state, action) {
			switch(action.type) {
				case "yell": return {message: `HEY! I just said ${state.message}`}
				case "whisper": return {message: `excuse me, I just said ${state.message}`}
			}
		}
		
		const [state, dispatch] = useReducer(reducer, initialState);
		
		return (
			<>
				<p> Message: {state.message} </p>
				<button onClick={()=>dispatch({type:"yell"})}> YELL </button>
				<button onClick={()=>dispatch({type:"whisper"})}> whisper </button>
				
			</>
		)
	}
	
-- 4-4 useRef for forms --
	- to obtain info input to form
		1) Create a ref_variable used to track desired input value
			eg: const sound = useRef();
			
		2) Attach the variable name as attribute to input tag
			eg: <input ref={sound} type="text"/>
			
		3) Create a function to access values
			eg:
			
			const submit = (e) => {
				e.preventDefault();
				const soundVal = sound.current.value;'
				sound.current.value = ""; // resets the value
			}
	
	eg.
	
			function App() {
			  const sound = useRef();
			  const color = useRef();

			  const submit = (e) => {
				e.preventDefault();
				const soundValue=sound.current.value;
				const colorValue=color.current.value;
				alert(`${soundValue} & ${colorValue}`)
			  }

			  return (
				<form onSubmit={submit}>
				  <input ref={sound} type="text"/>
				  <input ref={color} type="color"/>
				  <button>ADD</button>
				</form>
			  )
			}
	
	
-- Controlled Component to handle form inputs --

	- handle form inputs using state variables instead of useRef
	
	
	function App() {
		  const [sound, setSound] = useState("");
		  const [color, setColor] = useState("#000000")

		  const submit = (e) => {
			e.preventDefault();
			alert(`${sound} & ${color}`)
			setSound("");
			setColor("#000000")
		  }

		  return (
			<form onSubmit={submit}>
			  <input value={sound} type="text" onChange={(e)=>setSound(e.target.value)}/>
			  <input value={color} type="color" onChange={(e)=>setColor(e.target.value)}/>
			  <button>ADD</button>
			</form>
		  )
	}