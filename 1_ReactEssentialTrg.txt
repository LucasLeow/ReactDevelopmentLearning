-- Introduction --
	- React.js
		- Most popular JS library for building user interface
		- front-end framework

-- 1 What is React? --

-- 1-1 What is React? --
	- JS library to create user interfaces
	- created at Facebook, open-sourced @ 2013
	- React Native: create mobile app with React
	
	* reactjs.org (documentation for React)
	
	- Its architecture makes it:
		- faster & easier to build web products
		
-- 1-2 Setting up react devtools for web --

	1) search for React Developer tool <desired browser>
	2) add extension to browser
	3) Any webpage using react, can open inspect (Q)
		- will have Components & Profiler tab
		
-- 1-3 Different IDEs for development --
	- "react.new" in browser -> codesandbox.io (VSCode in browser)
	- codepen (build & test frontend code)
	- glitch.com
	
-- 2 Intro to React Elements --

-- 2-1 Adding React to Project --

	CDN of React:
		- Quick way to add React library to browser
		- Requires internet connection
	
    <script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin></script>	
		- react dom required to add react components to webpage
	
	- add in <head> tag
	
	
	Purpose of React:
		- Instead of creating content with HTML + CSS, create it with React
			i.e creating using JS
			
	
	Creating "h1" content using React:
	
		- ReactDOM.render(element, location);
		- React.createElement(tagName, properties, content);
	
		<div id = "root"> </div>
			- Convention for adding code with react
			- within <div> with id = "root"
		
		<script type = "text/javascript"> 
			ReactDOM.render(
			React.createElement("h1", null, "Getting Started with React"),
			document.getElementById("root")
			);
		</script>
		

-- 2-2 Creating React elements technique --
	<script type = "text/javascript">
	
		let header = React.createElement("h1", null, "Getting Started with React");
		ReactDOM.render(header, document.getElementById("root"));
		
	</script>
	
-- 2-3 Creating child within parent element using JSX --

	JSX: Javascript XML
		- HTML-like syntax for creating UI elements
		
	JS Implementation:

		<script type = "text/javascript">
		
			let ul = 
				React.createElement("ul", {style: {color: "blue"}},
				React.createElement("li", null, "Item 1"),
				React.createElement("li", null, "Item 2"),
				React.createElement("li", null, "Item 3"));
				
			ReactDOM.render(ul, document.getElementById("root"));
			
		</script>
	
	JSX Implementation: (Need Babel to compile, else error in Browser)
	
		Babel:
		- JSX tag-based syntax not supported in Browser
		- Takes code unsupported by browser & convert it to 1 supported by browser
		
		Step 1: add CDN of babel to <head>
			- Not the typical way to add babel, typically npm install babel
			- precompile before it even gets to the browser
		
		- <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
			- add the following CDN in <head> tag
			
			
		Step 2: Change script to type = "text/babel"
		
		<script type = "text/babel">
	
		ReactDOM.render(
			<ul>
				<li> Item 1 </li>
				<li> Item 2 </li>
				<li> Item 3 </li>
			</ul>,
			document.getElementById("root")
		);
		
		</script>

-- 2-5 Working with JSX Syntax --

	Benefits of JSX:
		- inject dynamic content into tags by referencing to variable names
		- by using {} JSX expression syntax
			- variable names
			- functions
		
			eg.

			
		<script type = "text/babel">
		
			let robot = "robot 1";
			let cowboy = "cowboy 1";
			let moon = "moon 1";
	
			ReactDOM.render(
				<ul>
					<li> {robot} </li>
					<li> {cowboy} </li>
					<li> {moon} </li>
				</ul>,
				document.getElementById("root")
			);
		
		</script>
		

-- 3 React Components --

-- 3-1 & 3-2 Creating React Components + Properties --
	- Component: Building block
		- A piece of UI for 1 part of the app
		- A JS function that returns JSX
		- fn name should have first letter capitalized
		
		Properties: (using FunctionName(props))
		- using components to display dynamic data
		- added as parameter to component Function (eg. Header(props))
		- actual value for props added where the component is rendered
		
		
				
	- 3-3 Working with lists -
		- shown in dishes & added in function Main(props)
		- if dealing with list, convert to object first using .map() to have id tied to each li
		- to prevent rendering problem
		- if already objects, then just <li key={obj.id}> {obj.item} </li> 
	
		eg:
		
		<script type = "text/babel">
		
		const dishes = [
			"Black Bean Soup",
			"Macaroni and Cheese",
			"Salmon and Potatoes"
		]
		
		const dish_objs = dishes.map((dish, idx) => ({
			id: idx,
			name: dish
		})
		);
			
			function Header(props) {
				return (
					<header>
						<h1> {props.name}'s Header </h1>
					</header>
				)
			}
			
			function Main(props) {
				return(
				<section>
					<img src="https://images.pexels.com/photos/376464/pexels-photo-376464.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1">
					<p>
						We serve the most {props.adjective} food around
					</p>
					
					<ul>
						{props.dishes.map((dish_obj) => (<li key={dish_obj.id}> {dish_obj.name} </li>))}
					</ul>
					
				</section>
				);
			}
			
			function Footer(props) {
				return (
					<footer>
						<p> Copyright {props.year} </p>
					</footer>
				);
			}
			
			function App() { // to combine different components together
				return (
					<div>
						<Header name="Lucas"/>
						<Main adjective="delicious" dishes={dish_objs}/>
						<Footer year={new Date().getFullYear()}/>
					</div>
				);
			}
			
			ReactDOM.render(
				<App/>,
				document.getElementById("root")
			);
			
		</script>
		
	- 3-4 Dealing with: "Each child in list should have unique "key" prop"
	
		- key = id to keep everything item within a list in sync
		- if any changes to middle / start of the list, id will keep track of items
		
		
		Solution 1: (Not recommended by React docs, still can cause rendering problem)
		
			.map((dish, idx) => (
				<li key={idx}> {dish} </li>
			))
			
		Solution 2: (create a new dish object from dishes array)
			- dont need to convert to obj if provided collection is already object
		
			const dish_objs = dishes.map((dish, idx) => ({
				id: idx,
				name: dish
			})
			);
			
	- 3-5 Adding images -
		just by adding <img src="imagelink" alt="imageDescription"/> in desired React Component
			

-- 3-6 React Fragment --
	- When rendering react components, it must be wrapped within tags
	
	eg.
		<div>
			<Header/>
			<Main/>
			<Footer/>
		</div>
		
	* This can cause clutter of <div>
	
	Solution: React Fragment
		- will not add additional tags to DOM but still allow rendering of sibling components
	
		<React.Fragment>
			<Header/>
			<Main/>
			<Footer/>
		</React.Fragment>