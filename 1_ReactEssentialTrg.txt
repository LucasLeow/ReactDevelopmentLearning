-- Introduction --
	- React.js
		- Most popular JS library for building user interface
		- front-end framework

-- 1 What is React? --

-- 1-1 What is React? --
	- JS library to create user interfaces
	- created at Facebook, open-sourced @ 2013
	- React Native: create mobile app with React
	
	* reactjs.org (documentation for React)
	
	- Its architecture makes it:
		- faster & easier to build web products
		
-- 1-2 Setting up react devtools for web --

	1) search for React Developer tool <desired browser>
	2) add extension to browser
	3) Any webpage using react, can open inspect (Q)
		- will have Components & Profiler tab
		
-- 1-3 Different IDEs for development --
	- "react.new" in browser -> codesandbox.io (VSCode in browser)
	- codepen (build & test frontend code)
	- glitch.com
	
-- 2 Intro to React Elements --

-- 2-1 Adding React to Project --

	CDN of React:
		- Quick way to add React library to browser
		- Requires internet connection
	
    <script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin></script>	
		- react dom required to add react components to webpage
	
	- add in <head> tag
	
	
	Purpose of React:
		- Instead of creating content with HTML + CSS, create it with React
			i.e creating using JS
			
	
	Creating "h1" content using React:
	
		- ReactDOM.render(element, location);
		- React.createElement(tagName, properties, content);
	
		<div id = "root"> </div>
			- Convention for adding code with react
			- within <div> with id = "root"
		
		<script type = "text/javascript"> 
			ReactDOM.render(
			React.createElement("h1", null, "Getting Started with React"),
			document.getElementById("root")
			);
		</script>
		

-- 2-2 Creating React elements technique --
	<script type = "text/javascript">
	
		let header = React.createElement("h1", null, "Getting Started with React");
		ReactDOM.render(header, document.getElementById("root"));
		
	</script>
	
-- 2-3 Creating child within parent element using JSX --

	JSX: Javascript XML
		- HTML-like syntax for creating UI elements
		
	JS Implementation:

		<script type = "text/javascript">
		
			let ul = 
				React.createElement("ul", {style: {color: "blue"}},
				React.createElement("li", null, "Item 1"),
				React.createElement("li", null, "Item 2"),
				React.createElement("li", null, "Item 3"));
				
			ReactDOM.render(ul, document.getElementById("root"));
			
		</script>
	
	JSX Implementation: (Need Babel to compile, else error in Browser)
	
		Babel:
		- JSX tag-based syntax not supported in Browser
		- Takes code unsupported by browser & convert it to 1 supported by browser
		
		Step 1: add CDN of babel to <head>
			- Not the typical way to add babel, typically npm install babel
			- precompile before it even gets to the browser
		
		- <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>
			- add the following CDN in <head> tag
			
			
		Step 2: Change script to type = "text/babel"
		
		<script type = "text/babel">
	
		ReactDOM.render(
			<ul>
				<li> Item 1 </li>
				<li> Item 2 </li>
				<li> Item 3 </li>
			</ul>,
			document.getElementById("root")
		);
		
		</script>

-- 2-5 Working with JSX Syntax --

	Benefits of JSX:
		- inject dynamic content into tags by referencing to variable names
		- by using {} JSX expression syntax
			- variable names
			- functions
		
			eg.

			
		<script type = "text/babel">
		
			let robot = "robot 1";
			let cowboy = "cowboy 1";
			let moon = "moon 1";
	
			ReactDOM.render(
				<ul>
					<li> {robot} </li>
					<li> {cowboy} </li>
					<li> {moon} </li>
				</ul>,
				document.getElementById("root")
			);
		
		</script>
		

-- 3 React Components --

-- 3-1 & 3-2 Creating React Components + Properties --
	- Component: Building block
		- A piece of UI for 1 part of the app
		- A JS function that returns JSX
		- fn name should have first letter capitalized
		
		Properties: (using FunctionName(props))
		- using components to display dynamic data
		- added as parameter to component Function (eg. Header(props))
		- actual value for props added where the component is rendered
		
		
				
	- 3-3 Working with lists -
		- shown in dishes & added in function Main(props)
		- if dealing with list, convert to object first using .map() to have id tied to each li
		- to prevent rendering problem
		- if already objects, then just <li key={obj.id}> {obj.item} </li> 
	
		eg:
		
		<script type = "text/babel">
		
		const dishes = [
			"Black Bean Soup",
			"Macaroni and Cheese",
			"Salmon and Potatoes"
		]
		
		const dish_objs = dishes.map((dish, idx) => ({
			id: idx,
			name: dish
		})
		);
			
			function Header(props) {
				return (
					<header>
						<h1> {props.name}'s Header </h1>
					</header>
				)
			}
			
			function Main(props) {
				return(
				<section>
					<img src="https://images.pexels.com/photos/376464/pexels-photo-376464.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1">
					<p>
						We serve the most {props.adjective} food around
					</p>
					
					<ul>
						{props.dishes.map((dish_obj) => (<li key={dish_obj.id}> {dish_obj.name} </li>))}
					</ul>
					
				</section>
				);
			}
			
			function Footer(props) {
				return (
					<footer>
						<p> Copyright {props.year} </p>
					</footer>
				);
			}
			
			function App() { // to combine different components together
				return (
					<div>
						<Header name="Lucas"/>
						<Main adjective="delicious" dishes={dish_objs}/>
						<Footer year={new Date().getFullYear()}/>
					</div>
				);
			}
			
			ReactDOM.render(
				<App/>,
				document.getElementById("root")
			);
			
		</script>
		
	- 3-4 Dealing with: "Each child in list should have unique "key" prop"
	
		- key = id to keep everything item within a list in sync
		- if any changes to middle / start of the list, id will keep track of items
		
		
		Solution 1: (Not recommended by React docs, still can cause rendering problem)
		
			.map((dish, idx) => (
				<li key={idx}> {dish} </li>
			))
			
		Solution 2: (create a new dish object from dishes array)
			- dont need to convert to obj if provided collection is already object
		
			const dish_objs = dishes.map((dish, idx) => ({
				id: idx,
				name: dish
			})
			);
			
	- 3-5 Adding images -
		just by adding <img src="imagelink" alt="imageDescription"/> in desired React Component
			

-- 3-6 React Fragment --
	- When rendering react components, it must be wrapped within tags
	
	eg.
		<div>
			<Header/>
			<Main/>
			<Footer/>
		</div>
		
	* This can cause clutter of <div>
	
	Solution: React Fragment
		- will not add additional tags to DOM but still allow rendering of sibling components
	
		<React.Fragment>
			<Header/>
			<Main/>
			<Footer/>
		</React.Fragment>

-- 4 React State in Component Tree --

-- 4-1 Generating Project with Create-React-App generator --
	- previously was using index.html & CDN to connect to react library 
	- better to use create-react-app to run react locally in browser
	
	1) Go to desired project directory
	2) npx create-react-app projectName
		eg: npx create-react-app react-app
			- Installs:
				- react
				- reactDOM
				- reactScripts (babel + compiling)
		* if received files from someone else with package.json, just "npm i"
	3) cd to react-app
	4) npm start
	
-- 4-2 Touring create-react-app project --

	inside package.json:
		"dependencies"
			- react: To create react components
			- reactDOM: To add & render components to DOM
			- react-scripts: Handle bundling
			
	in "src" directory:
		- contain the main files
			- index.js: Entry point for app (main js file)
				- to render app to DOM
				- <React.StrictMode> </React.StrictMode> (in reactDOM.render())
					- tool for highlighting potential problems
					- only run in dev, not in prod
					
			- app.js: File containing all the react components
				- recap: react components are JS functions, with first letter caps
				- within function, returns JSX syntax that looks like HTML
				- last line consist of "export default App;"
					- so that can import from index.js
						- import App from './App';
	
	node_modules directory:
		- where all the packages / dependencies are installed
				
	in "public" directory:
		- index.html: Main html file where <div id="root"></div> exist
		
-- 4-3 Destructuring arrays & objects --

	- important concept in JS : Destructuring
		- helps deal with "state" in app
		
		Destructuring objects:
			- { key_name } to immediately retrieve value based on key inside
		
		Destructuring arrays:
			const [first, second, third] = ["Tokyo", "Singapore", "Taipei"];
			- assigning variable name based on position in array
			
			first == "Tokyo"
			second == "Singapore"
			third == "Taipei"
		
		function App( {key_1} ) {
		  return (
			<div className="App"> 
				<h1>
				  Learning {key_1}
				</h1>
			</div>
		  );
		}
		
		ReactDOM.render(
		  <React.StrictMode>
			<App key_1="Destructuring"/>
		  </React.StrictMode>,
		  document.getElementById('root')
		);
		
-- 4-4 & 4-5 useState & useEffect Hook --

	Hooks:
		- use state & other react features without writing a class

	- useState fn: Modern way to handle states in React app
	- const [initialState, setState] = useState("initialState");
		- setState can be called to change value of state
	- useState returns array of 2 items:
		[currentState, function_to_modify_state]
		
	- State variable can be:
		- String
		- Number
		- Boolean
		- Object / Array
	
		- 4-4 useEffect Hook -
			- typically used to manage side effects unrelated to component render
			- console messages
			- loading data
			- using animations
			
			can utilize useEffect
				- something that happens alongside the render
				- takes in 2 arguments
				
				useEffect(fn_to_execute, dependency_array)
					- dependency_array: when effect is called again
						- if never pass in, useEffect will be called every time state changes
						
						- if pass in (fn, []): empty array: effect will not be called again

						- (fn, [state_variable(s)])
							- will track for any changes in the statevariable
							- and execute the fn if changes detected
							
							[emotion, secondary] <- tracks the 2 state variables & execute fn if any changes is detected in the specified state variables.
							
							
							
					
	eg:
			
		import { useState, useEffect } from "react";
				
		function App( {}) {

		  const [emotion, setEmotion] = useState("happy")
		  const [secondary, setSecondary] = useState("tired");

		  useEffect(() => {
			console.log(`It's ${emotion} right now`);
		  }, [emotion]);

		  useEffect(()=> {
			console.log(`It's ${secondary} around here!`);
		  })
		  return (
		  <div className="App"> 
			<h1> Current emotion is:  {emotion}  </h1>
			<button onClick={() => setEmotion("Sad")}> Sad </button>
			<button onClick={() => setEmotion("Excited")}>Excited</button>
			<h2> Current secondary emotion is {secondary}.</h2>
			<button onClick={()=> setSecondary("Grateful")}>Grateful</button>
		  </div>
		  );
		}	


-- 4-7 useReducer Hook --
	- takes in 2 arguments
		(fn_to_execute, initial_state)
	- use to execute a function whenever a change in state is detected
		
		
	import {  useReducer  } from "react";
		
	function App( {}) {

	  const [checked, setChecked] = useReducer(
		(checked)=>!checked,
		false
		);
		
	  return (
		<div className="App">
		  <input 
			type="checkbox" 
			value={checked} 
			onChange={setChecked}
		  />
		  <label>{checked? "checked":"not checked"}</label>
		</div>
	  )
	}	
	
	
-- 5 Handling Forms in React --

-- 5-1 Uncontrolled Component Technique --
	- using useRef Hook (Uncontrolled component)
		- managing form components outside of state (just using current.value)
	
		- returns Object {current: value}
		- typically referencing form tags
		- can be attached to UI element and make interaction possible with JS
			1) Initialize reference variable
				eg. const colorTitle = useRef(); // Known as uncontrolled component
					- can see this as a container with value contained within
					- will not re-render, must query current value to access
				
			2) Attach reference to desired UI tag
				eg. <input ref={colorTitle} type="text"/>
				
			3) Creating function to interact with reference variable
				const submit = (e) => {
					const colorInput = colorTitle.current.value; // reference return object with key // called current
				}
				
			4) Reset form element back to default (optional)
				colorTitle.current.value = "";
	
	eg.
	
	import { useRef } from "react";
	
	function App() {
	
		const colorTitle = useRef();
		const hexColor = useRef();
		
		const submit = (e) => {
			e.preventDefault(); // prevent page from refreshing
			const colorInput = colorTitle.current.value;
			const hexInput = hexColor.current.value;
			alert(`Selected Color: ${colorInput} \n Selected Hex: ${hexInput}`)
			
			colorTitle.current.value = ""; // reset form element back to default
			hexColor.current.value=""; 
		};
		
		return (
			<form onSubmit = {submit}>
			
				<input ref={colorTitle} type="text" placeholder="Color title..."/>
				<input ref={hexColor} type="color"/>
				<button>ADD</button>
				
			</form>
		);
	}

-- 5-2 Controlled Component Technique --
	- Managing forms using state (useState)
	- Whenever useState used, its a controlled component
		- controlling form by creating state values
	
	
	import { useState } from "react";
		
	function App() {

	const [title, setTitle] = useState(""); // initial state is empty
	const [hex, setHex] = useState("#000000");
	
	const submit = (event) => {
	
	  event.preventDefault(); // prevent page from refreshing
	  alert(`Selected Color: ${title} \n Selected Hex: ${hex}`)
	  setTitle("");
	  setHex("#000000");
	  
	};

	  return (
		<form onSubmit = {submit}>

		  <input value={title} type="text" onChange={event=> setTitle(event.target.value)} placeholder="Color title..."/>
		  <input value={hex} onChange={(event) => setHex(event.target.value)} type="color"/>
		  <button>ADD</button>
		  
		</form>
	  );
	}
	
-- 5-3 Building custom Hooks --

	- useState: To manage state of form fields
	- useRef: To manipulate values from form fields
	- useEffect: To perform side effects based on state
	
	
	Custom hook:
		- A JS function
		- must always start with "use"
			eg. useInput()
		- can return anything, based on own needs
		- destructure & access custom hook accordingly
			
			
			
	import { useState } from "react";

	function useInput(initialValue) {
	  const [value, setValue] = useState(initialValue);
	  return [
		{value, onChange: e => setValue(e.target.value)},
		() => setValue(initialValue) // reset value
	  ]
	}

	function App() {

	  const [titleProp, resetTitle] = useInput(""); // initial state is empty
	  const[hexProp, resetHex] = useInput("#000000");

	const submit = (event) => {
	  event.preventDefault(); // prevent page from refreshing
	  alert(`Selected Color: ${titleProp.value} \n Selected Hex: ${hexProp.value}`)
	 resetTitle();
	  resetHex();

	};

	  return (

		<form onSubmit = {submit}>
		  <input {...titleProp} placeholder="Color title..."/>
		  <input {...hexProp} type="color"/>
		  <button>ADD</button>
		  
		</form>
	  );
	}
	
-- 5-5 Form Libraries --

	- formik.org
		- handle submission of form
		
	- react-hook-form
		- uses validation
	
	- usehooks.com (not forms specific, but more info for hooks)
	


-- 6 Async React --

-- 6-1 & 6-2 Fetching & displaying data with hooks --
	- fetching data from external API
		- https://api.github.com/users/LucasLeow
		
		- useState: To handle data
		- useEffect: To make call to external API
		
		
		
		
						import { useState, useEffect} from "react";

						function GitHubUser( { name, location, avatar }) { // essentially props
							return (
								<div>
									<h1> {name} </h1>
									<p> {location} </p>
									<img src={avatar}/>
								</div>
							);
						}
						
						function App() {
							const [data, setData] = useState(null);
							const URL = `https://api.github.com/users/LucasLeow`;
							
							useEffect(()=>{
								fetch(URL)
								.then(res=>res.json())
								.then(data=>setData(data))
							}, []);
							
							if(data) {
								return (
									<GitHubUser // specify props here as properties, passed to GitHubUser Component
										name={data.name} 
										location={data.location}
										avatar={data.avatar_url}
									/>
								);
							}
						}
						
						
	
-- 6-3 Handling Loading States --

	- when fetching data from external API, data can be in different states
		- loading state (in process of fetching data, response not yet received)
		- success state (data response successfully received)
		- error state (data response not retrieved)
	
	- can be represented with useState Hook
	
	

	
	-- code --
			
					import { useState, useEffect} from "react";

					function GitHubUser( { name, location, avatar }) {
					  return (
						<div>
						  <h1> {name} </h1>
						  <p> {location} </p>
						  <img height={150} alt="" src={avatar}/>
						</div>
					  );
					}

					function App() {
					  const [data, setData] = useState(null);
					  const [error, setError] = useState(null);
					  const [loading, setLoading] = useState(false);
					  const URL = `https://api.github.com/users/LucasLeow`;
					  
					  useEffect(()=> {
						setLoading(true);

						fetch(URL)
						.then(res=>res.json())
						.then(data=>setData(data))
						.then(() => setLoading(false))
						.catch(setError)
					  }, []);
					  
					  if (loading) { return (<h1>Loading...</h1>); } 

					  if (error) { return (<pre>{JSON.stringify(error)}</pre>); }    

					  if (!data) return null;
					  
					  return (
						  <GitHubUser 
							name={data.name} 
							location={data.location}
							avatar={data.avatar_url}
						  />
						);
					  }
		  
		  
		  
		  
		  
		  
-- 6-4 Fetching Data from GraphQL API --
	- GraphQL:
		- open-source data query & manipulation language for API
		- Specify desired data using fields
		
	GraphQL Query:

		query {
			allLifts {
				name
				elevationGain
				status
			}
		}
		
	eg.
	
			const query = `
			query {
				allLifts {
					name
					elevationGain
					status
				}
			}
			`;
			
			const options = {
				method: "POST",
				headers: {"Content-Type": "application/json"},
				body: JSON.stringify({ query })
			}
	
	
			function Lift( { name, elevationGain, status }) {
				return (
					<div>
						<h1> {name} </h1>
						<p> {elevationGain} {status}</p>
					</div>
				)
			}
		
		
				function App() {
				  const [data, setData] = useState(null);
				  const [error, setError] = useState(null);
				  const [loading, setLoading] = useState(false);
				  const URL = `https://snowtooth.moonhighway.com/`;
				  
				  useEffect(()=> {
					setLoading(true);

					fetch(URL, options)
					.then(res=>res.json())
					.then(data=>setData(data))
					.then(() => setLoading(false))
					.catch(setError)
				  }, []);
				  
				  if (loading) { return (<h1>Loading...</h1>); } 

				  if (error) { return (<pre>{JSON.stringify(error)}</pre>); }    

				  if (!data) return null;
				  
				  return (
					<div>
						{data.data.allLifts.map(lift=>( // data key wrapped within a data key
						<Lift name={lift.name} elevationGain={lift.elevationGain} status={lift.status}/>
						)
						)}
					</div>
					);
			  }
			  


-- 6-5 render props --
	- using functions to display right data at the right time
	
	eg.
	
		const tahoe_peaks = [
		  {name: "Freel", elevation: 10891},
		  {name: "Monument", elevation: 10067},
		  {name: "Pyramid", elevation: 9983}
		];

		// renderItem: Render individual list item
		// renderEmpty: Display if list empty 
		function List( { data, renderItem, renderEmpty } ) {
		  return !data.length ? ( renderEmpty ): (
		  <ul>
			{data.map(item=> (
			  <li key={item.name}> 
				{renderItem(item)}
			  </li>))}
			</ul>
			);
		}

		function App() {
		  return (
			<List 
			data={tahoe_peaks}
			renderEmpty={<p>This list is empty!</p>}
			renderItem={(item)=> (
			  <>
			  {item.name}-{item.elevation} ft.
			  </>
			)
			} />
		  );
		  }
		  
-- 7 React Router --
	- mechanism for moving component to component
	- connecting different components together
		- similar to linking of pages together
			- eg. Moving from home page (home component) -> About page (about component)
	
	- npm install react-router-dom
		- take note of vulnerabilities
		- works for web app, if for ReactNative, have its own package to deal with routes
		
	Inside App.js (Where components reside)
		- remember to export components
	
	eg.
	
	export function About() {
	  return (
		<div>
		  <h1>About Us</h1>
		</div>
	  )
	}
	
	export function App() {
	  return <h1>Testing</h1>
	}
	
	Inside index.js (entry point)
	
		import { BrowserRouter, Routes, Route } from "react-router-dom";
		
		ReactDOM.render(
			<BrowserRouter>
			  <Routes>
				<Route path="/" element={<App />} />
				<Route path="/about" element={<About />} />
			  </Routes>
			</BrowserRouter>,
			document.getElementById('root')
		);
		
-- 7-3 Creating in-page links to pages --


	Inside App.js:
	
		import { Link } from "react-router-dom";
		
		export function App() {
		  return (
			<div>
			  <nav>
				<Link to="/about">About</Link>
				<Link to="/contact">Contact</Link>
			  </nav>
			  <h1>Testing</h1>
			</div>
		  )
		}
		
-- 7-4 Nested Routes to display content --

	eg. Want to display <History> component content in <About> component
	
	inside App.js:
	
		import { Link, Outlet } from "react-router-dom";
	
		export function About() {
		  return (
			<div>
			  <h1>About Us</h1>
			  <Outlet /> // child content here
			</div>
			<span>
				<Outlet /> // child content here
			</span>
		  )
		}
	
		export function History() {
			return (
				<div>
					<h1> Our History </h1>
				</div>
			);
		}
	
	inside index.js:
	
		import {App, About, History}  from './App';
		import { BrowserRouter, Routes, Route } from "react-router-dom";
		
		ReactDOM.render(
			<BrowserRouter>
				<Routes>
					<Route path="/" element={<App />}/>
					<Route path="/about" element={<About />}>
						<Route path="history" element={<History />}/> // access with /about/history
					</Route>	
				</Routes>
			</BrowserRouter>
		)

	- After linking child path with parent path, content of child can be accessed by:
		- specifying <Outlet /> in parent component